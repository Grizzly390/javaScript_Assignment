Q. What are loops, and what do we need them? Explain different types of loops with their syntax and
examples.

Loops are programming constructs that allow us to repeatedly execute a block of code as long as a specified condition is true. They are used to automate repetitive tasks and make the code more efficient and concise.

JavaScript provides several types of loops, including for, while, and do-while, each with its own syntax and use cases.

1. For Loop:
The for loop is commonly used when the number of iterations is known in advance.

    syntax:
    for (initialization; condition; iteration) {
    // Code to be repeated
    }

    Example:
    // Print numbers from 1 to 5
    for (let i = 1; i <= 5; i++) {
    console.log(i);
    }

2. While Loop:
The while loop continues to execute a block of code as long as the specified condition is true.
    
    syntax:
    while (condition) {
    // Code to be repeated
    }

    Example:
    // Print numbers from 1 to 5 using a while loop
    let i = 1;
    while (i <= 5) {
    console.log(i);
    i++;
    }

3. Do-While Loop:
Similar to the while loop, the do-while loop executes a block of code while a specified condition is true. The key difference is that the do-while loop guarantees that the code block is executed at least once.

    syntax:
    do {
    // Code to be repeated
    } while (condition);

    Example:
    // Print numbers from 1 to 5 using a do-while loop
    let j = 1;
    do {
    console.log(j);
    j++;
    } while (j <= 5);

In all loop types, the break statement can be used to exit the loop prematurely, and the continue statement can be used to skip the rest of the code inside the loop for the current iteration.

Example with break:
// Break the loop when i is equal to 3
    for (let i = 1; i <= 5; i++) {
    if (i === 3) {
        break;
        }
    console.log(i);
    }

Example with continue:
// Skip printing even numbers
    for (let i = 1; i <= 5; i++) {
    if (i % 2 === 0) {
        continue;
        }
    console.log(i);
    }




